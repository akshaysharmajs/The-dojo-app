{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const abortCont = new AbortController();\n    setTimeout(() => {\n      fetch(url, {\n        signal: abortCont.signal\n      }).then(res => {\n        console.log(res);\n\n        if (!res.ok) {\n          throw Error('could not fetch the data for that resource');\n        }\n\n        return res.json();\n      }).then(data => {\n        setData(data);\n        setIsPending(false);\n        setError(null);\n      }).catch(err => {\n        if (err.name === 'AbortError') {\n          console.log('fetch aborted');\n        } else {\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000);\n    return () => abortCont.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/akshaysharma/Desktop/git/ReactApp/dojo-blog/src/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","abortCont","AbortController","setTimeout","fetch","signal","then","res","console","log","ok","Error","json","catch","err","name","message","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AACtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,SAAS,GAAG,IAAIC,eAAJ,EAAlB;AAEAC,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACV,GAAD,EAAM;AAACW,QAAAA,MAAM,EAAEJ,SAAS,CAACI;AAAnB,OAAN,CAAL,CACCC,IADD,CACMC,GAAG,IAAI;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,YAAI,CAACA,GAAG,CAACG,EAAT,EAAY;AACR,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACH;;AACD,eAAOJ,GAAG,CAACK,IAAJ,EAAP;AACH,OAPD,EAQCN,IARD,CAQOX,IAAD,IAAU;AACZC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAZD,EAaCa,KAbD,CAaOC,GAAG,IAAI;AACV,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA8B;AAC1BP,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACH,SAFD,MAEO;AACHX,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACc,GAAG,CAACE,OAAL,CAAR;AACH;AACJ,OApBD;AAqBH,KAtBS,EAsBP,IAtBO,CAAV;AAwBA,WAAO,MAAMf,SAAS,CAACgB,KAAV,EAAb;AACH,GA5BQ,EA4BN,CAACvB,GAAD,CA5BM,CAAT;AA6BA,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CAlCD;;GAAMN,Q;;AAoCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        const abortCont = new AbortController();\n\n        setTimeout(() => {\n            fetch(url, {signal: abortCont.signal})\n            .then(res => {\n                console.log(res);\n                if (!res.ok){\n                    throw Error('could not fetch the data for that resource');\n                }\n                return res.json();\n            })\n            .then((data) => {\n                setData(data);\n                setIsPending(false);\n                setError(null);\n            })\n            .catch(err => {\n                if (err.name === 'AbortError'){\n                    console.log('fetch aborted');\n                } else {\n                    setIsPending(false);\n                    setError(err.message);\n                }\n            })\n        }, 1000)\n    \n        return () => abortCont.abort();\n    }, [url]);\n    return {data, isPending, error};\n}\n\nexport default useFetch;"]},"metadata":{},"sourceType":"module"}